-- borastock.sq - Complete database schema with proper relationships

-- Table des fournisseurs (Suppliers)
CREATE TABLE suppliers (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  category TEXT,
  contact_person TEXT,
  email TEXT,
  phone TEXT,
  address TEXT,
  city TEXT,
  country TEXT,
  rating REAL NOT NULL DEFAULT 0.0,
  status TEXT NOT NULL DEFAULT 'ACTIVE', -- ACTIVE, INACTIVE, PENDING, BLOCKED
  reliability TEXT NOT NULL DEFAULT 'AVERAGE', -- EXCELLENT, GOOD, AVERAGE, POOR
  last_order_date TEXT,
  payment_terms TEXT,
  notes TEXT,
  created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Table des produits/articles (Stock Items)
CREATE TABLE stock_items (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL UNIQUE,
  category TEXT NOT NULL,
  description TEXT,
  min_stock INTEGER NOT NULL DEFAULT 0,
  max_stock INTEGER NOT NULL DEFAULT 100,
  unit_price REAL NOT NULL DEFAULT 0.0,
  supplier_id INTEGER NOT NULL,
  status TEXT NOT NULL DEFAULT 'ACTIVE', -- ACTIVE, INACTIVE, DISCONTINUED
  created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(supplier_id) REFERENCES suppliers(id) ON DELETE RESTRICT
);

-- Table des entrées de stock (Stock Entries)
CREATE TABLE stock_entries (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  stock_item_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL,
  unit_price REAL NOT NULL,
  total_value REAL NOT NULL,
  entry_date TEXT NOT NULL,
  batch_number TEXT,
  expiry_date TEXT,
  supplier_id INTEGER NOT NULL,
  status TEXT NOT NULL DEFAULT 'PENDING', -- PENDING, VALIDATED, RECEIVED, CANCELLED
  notes TEXT,
  created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(stock_item_id) REFERENCES stock_items(id) ON DELETE CASCADE,
  FOREIGN KEY(supplier_id) REFERENCES suppliers(id) ON DELETE RESTRICT
);

-- Table des sorties de stock (Stock Exits)
CREATE TABLE stock_exits (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  stock_item_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL,
  unit_price REAL NOT NULL,
  total_value REAL NOT NULL,
  exit_date TEXT NOT NULL,
  customer TEXT NOT NULL,
  order_number TEXT,
  delivery_address TEXT,
  status TEXT NOT NULL DEFAULT 'PENDING', -- PENDING, PREPARED, SHIPPED, DELIVERED, CANCELLED
  urgency TEXT NOT NULL DEFAULT 'LOW', -- LOW, MEDIUM, HIGH
  notes TEXT,
  created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(stock_item_id) REFERENCES stock_items(id) ON DELETE CASCADE
);

-- Vue pour calculer le stock actuel de chaque produit
CREATE VIEW current_stock AS
SELECT
  si.id,
  si.name,
  si.category,
  si.description,
  si.min_stock,
  si.max_stock,
  si.unit_price,
  si.supplier_id,
  si.status,
  COALESCE(entries.total_entries, 0) - COALESCE(exits.total_exits, 0) AS current_stock,
  si.created_at,
  si.updated_at
FROM stock_items si
LEFT JOIN (
  SELECT
    stock_item_id,
    SUM(quantity) AS total_entries
  FROM stock_entries
  WHERE status IN ('VALIDATED', 'RECEIVED')
  GROUP BY stock_item_id
) entries ON si.id = entries.stock_item_id
LEFT JOIN (
  SELECT
    stock_item_id,
    SUM(quantity) AS total_exits
  FROM stock_exits
  WHERE status IN ('SHIPPED', 'DELIVERED')
  GROUP BY stock_item_id
) exits ON si.id = exits.stock_item_id;

-- Requêtes pour les fournisseurs
insertSupplier:
INSERT INTO suppliers(name, category, contact_person, email, phone, address, city, country, rating, status, reliability, last_order_date, payment_terms, notes)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

selectAllSuppliers:
SELECT * FROM suppliers ORDER BY name ASC;

selectSupplierById:
SELECT * FROM suppliers WHERE id = ?;

updateSupplier:
UPDATE suppliers
SET name = ?, category = ?, contact_person = ?, email = ?, phone = ?, address = ?, city = ?, country = ?, rating = ?, status = ?, reliability = ?, last_order_date = ?, payment_terms = ?, notes = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?;

deleteSupplier:
DELETE FROM suppliers WHERE id = ?;

-- Requêtes pour les articles en stock
insertStockItem:
INSERT INTO stock_items(name, category, description, min_stock, max_stock, unit_price, supplier_id, status)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

selectAllStockItems:
SELECT
  cs.*,
  s.name AS supplier_name,
  s.category AS supplier_category,
  s.contact_person,
  s.email AS supplier_email,
  s.phone AS supplier_phone,
  s.rating AS supplier_rating,
  s.status AS supplier_status,
  s.reliability AS supplier_reliability
FROM current_stock cs
JOIN suppliers s ON cs.supplier_id = s.id
ORDER BY cs.name ASC;

selectStockItemById:
SELECT
  cs.*,
  s.name AS supplier_name,
  s.category AS supplier_category,
  s.contact_person,
  s.email AS supplier_email,
  s.phone AS supplier_phone,
  s.rating AS supplier_rating,
  s.status AS supplier_status,
  s.reliability AS supplier_reliability
FROM current_stock cs
JOIN suppliers s ON cs.supplier_id = s.id
WHERE cs.id = ?;

updateStockItem:
UPDATE stock_items
SET name = ?, category = ?, description = ?, min_stock = ?, max_stock = ?, unit_price = ?, supplier_id = ?, status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?;

deleteStockItem:
DELETE FROM stock_items WHERE id = ?;

-- Requêtes pour les entrées de stock
insertStockEntry:
INSERT INTO stock_entries(stock_item_id, quantity, unit_price, total_value, entry_date, batch_number, expiry_date, supplier_id, status, notes)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

selectAllStockEntries:
SELECT
  se.*,
  si.name AS product_name,
  si.category AS product_category,
  s.name AS supplier_name
FROM stock_entries se
JOIN stock_items si ON se.stock_item_id = si.id
JOIN suppliers s ON se.supplier_id = s.id
ORDER BY se.entry_date DESC;

selectStockEntriesByItemId:
SELECT
  se.*,
  si.name AS product_name,
  si.category AS product_category,
  s.name AS supplier_name
FROM stock_entries se
JOIN stock_items si ON se.stock_item_id = si.id
JOIN suppliers s ON se.supplier_id = s.id
WHERE se.stock_item_id = ?
ORDER BY se.entry_date DESC;

updateStockEntry:
UPDATE stock_entries
SET quantity = ?, unit_price = ?, total_value = ?, entry_date = ?, batch_number = ?, expiry_date = ?, supplier_id = ?, status = ?, notes = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?;

deleteStockEntry:
DELETE FROM stock_entries WHERE id = ?;

-- Requêtes pour les sorties de stock
insertStockExit:
INSERT INTO stock_exits(stock_item_id, quantity, unit_price, total_value, exit_date, customer, order_number, delivery_address, status, urgency, notes)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

selectAllStockExits:
SELECT
  sx.*,
  si.name AS product_name,
  si.category AS product_category
FROM stock_exits sx
JOIN stock_items si ON sx.stock_item_id = si.id
ORDER BY sx.exit_date DESC;

selectStockExitsByItemId:
SELECT
  sx.*,
  si.name AS product_name,
  si.category AS product_category
FROM stock_exits sx
JOIN stock_items si ON sx.stock_item_id = si.id
WHERE sx.stock_item_id = ?
ORDER BY sx.exit_date DESC;

updateStockExit:
UPDATE stock_exits
SET quantity = ?, unit_price = ?, total_value = ?, exit_date = ?, customer = ?, order_number = ?, delivery_address = ?, status = ?, urgency = ?, notes = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?;

deleteStockExit:
DELETE FROM stock_exits WHERE id = ?;

-- Requêtes pour les statistiques
selectStockStatistics:
SELECT
  COUNT(*) AS total_items,
  SUM(CASE WHEN current_stock > 0 THEN 1 ELSE 0 END) AS items_in_stock,
  SUM(CASE WHEN current_stock <= min_stock AND current_stock > 0 THEN 1 ELSE 0 END) AS items_low_stock,
  SUM(CASE WHEN current_stock = 0 THEN 1 ELSE 0 END) AS items_out_of_stock,
  SUM(CASE WHEN current_stock > max_stock THEN 1 ELSE 0 END) AS items_overstocked,
  SUM(current_stock * unit_price) AS total_stock_value
FROM current_stock
WHERE status = 'ACTIVE';

selectRecentEntries:
SELECT
  se.id,
  se.quantity,
  se.entry_date,
  si.name AS product_name,
  s.name AS supplier_name
FROM stock_entries se
JOIN stock_items si ON se.stock_item_id = si.id
JOIN suppliers s ON se.supplier_id = s.id
WHERE se.status IN ('VALIDATED', 'RECEIVED')
ORDER BY se.entry_date DESC
LIMIT ?;

selectRecentExits:
SELECT
  sx.id,
  sx.quantity,
  sx.exit_date,
  si.name AS product_name,
  sx.customer
FROM stock_exits sx
JOIN stock_items si ON sx.stock_item_id = si.id
WHERE sx.status IN ('SHIPPED', 'DELIVERED')
ORDER BY sx.exit_date DESC
LIMIT ?;


-- Récupérer l'ID du dernier enregistrement inséré
lastInsertRowId:
SELECT last_insert_rowid();
selectRecentEntriesWithItemName:
SELECT e.*, i.name AS itemName
FROM stock_entries e
JOIN stock_items i ON i.id = e.stock_item_id
ORDER BY e.entry_date DESC
LIMIT ?;

selectRecentExitsWithItemName:
SELECT x.*, i.name AS itemName
FROM stock_exits x
JOIN stock_items i ON i.id = x.stock_item_id
ORDER BY x.exit_date DESC
LIMIT ?;
